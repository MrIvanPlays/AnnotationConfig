package com.mrivanplays.annotationconfig.toml;

import com.mrivanplays.annotationconfig.core.annotations.ConfigObject;
import com.mrivanplays.annotationconfig.core.annotations.Key;
import com.mrivanplays.annotationconfig.core.annotations.comment.Comment;
import com.mrivanplays.annotationconfig.core.serialization.DeserializeConstructor;
import java.time.OffsetDateTime;
import java.util.Date;

@Comment("Generated by AnnotationConfig v2.0.0")
public class TOMLTestSubject {

  @Comment("name")
  private String name = "Ivan";

  @Comment("bar")
  private boolean bar = false;

  @ConfigObject private MySection server = new MySection();

  @Comment("Server")
  public static class MySection {

    // field comments in section are not supported

    @Key("ip")
    private String hipi = "localhost";

    @Key("theport")
    private int port = 25565;

    public String getHipi() {
      return hipi;
    }

    public int getPort() {
      return port;
    }
  }

  @Comment("java.util.Date")
  private Date date = new Date();

  @Comment("OffsetDateTime")
  private OffsetDateTime dateTime = OffsetDateTime.now();

  @Comment("This has been dumped with the default serializer")
  @Key("default-serializer")
  private DefaultSerializerDump tableWithDefaultSerialize =
      new DefaultSerializerDump("foo string", 1, 0.555);

  public static class DefaultSerializerDump {

    private String foo;
    private int bar;
    private double baz;

    @DeserializeConstructor
    public DefaultSerializerDump(String foo, int bar, double baz) {
      this.foo = foo;
      this.bar = bar;
      this.baz = baz;
    }

    public String getFoo() {
      return foo;
    }

    public int getBar() {
      return bar;
    }

    public double getBaz() {
      return baz;
    }
  }

  public String getName() {
    return name;
  }

  public boolean isBar() {
    return bar;
  }

  public MySection getServer() {
    return server;
  }

  public Date getDate() {
    return date;
  }

  public OffsetDateTime getDateTime() {
    return dateTime;
  }

  public DefaultSerializerDump getTableWithDefaultSerialize() {
    return tableWithDefaultSerialize;
  }
}
