package com.mrivanplays.annotationconfig.yaml;

import com.mrivanplays.annotationconfig.core.annotations.ConfigObject;
import com.mrivanplays.annotationconfig.core.annotations.Key;
import com.mrivanplays.annotationconfig.core.annotations.comment.Comment;
import com.mrivanplays.annotationconfig.core.serialization.ConfigDataObject;
import com.mrivanplays.annotationconfig.core.serialization.FieldTypeSerializer;
import com.mrivanplays.annotationconfig.core.serialization.SerializedObject;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Comment("Generated by AnnotationConfig v1.0")
public class YAMLTestSubject {

  @Comment("name")
  private String name = "Ivan";

  @Comment("foo")
  private String foo = "bar";

  @ConfigObject private Messages messages = new Messages();

  @Comment("bar")
  private String bar = "baz";

  @Comment("this is a list")
  private List<String> list = Arrays.asList("Hello", "bla bla");

  @Comment("All supported messages")
  public static class Messages {

    // comments in sections are not supported

    @Key("no-console")
    private String noConsole = "No console!";

    @Key("console-only")
    private String consoleOnly = "This command is console only!";

    public String getNoConsole() {
      return noConsole;
    }

    public String getConsoleOnly() {
      return consoleOnly;
    }
  }

  @ConfigObject private Location location = new Location();

  @Comment("The location of the player")
  public static class Location {

    private String world = "world";

    private int x = 20;
    private int y = 2;
    private int z = 1;
  }

  @Comment("Second location")
  private LocationNoConfigObject locationTwo = new LocationNoConfigObject("world", 20, 2, 1);

  public static class LocationNoConfigObject {

    private String world;
    private int x, y, z;

    public LocationNoConfigObject(String world, int x, int y, int z) {
      this.world = world;
      this.x = x;
      this.y = y;
      this.z = z;
    }

    public int getX() {
      return x;
    }
  }

  public static class LocationNoConfigObjectSerializer
      implements FieldTypeSerializer<LocationNoConfigObject> {

    @Override
    public LocationNoConfigObject deserialize(ConfigDataObject data, Field field) throws Exception {
      Map<String, Object> map = (Map<String, Object>) data.getRawData();
      return new LocationNoConfigObject(
          String.valueOf(map.get("world")),
          Integer.parseInt(String.valueOf(map.get("x"))),
          Integer.parseInt(String.valueOf(map.get("y"))),
          Integer.parseInt(String.valueOf(map.get("z"))));
    }

    @Override
    public SerializedObject serialize(LocationNoConfigObject value, Field field) throws Exception {
      Map<String, Object> map = new HashMap<>();
      map.put("world", value.world);
      map.put("x", value.x);
      map.put("y", value.y);
      map.put("z", value.z);
      return SerializedObject.map(map);
    }
  }

  public String getName() {
    return name;
  }

  public String getFoo() {
    return foo;
  }

  public Messages getMessages() {
    return messages;
  }

  public String getBar() {
    return bar;
  }

  public List<String> getList() {
    return list;
  }

  public Location getLocation() {
    return location;
  }

  public LocationNoConfigObject getLocationTwo() {
    return locationTwo;
  }
}
